var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "ky-universal", "@ungap/url-search-params", "./interfaces"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = exports.search = exports.get = exports.ImdbError = exports.SearchResults = exports.SearchResult = exports.Game = exports.TVShow = exports.Episode = exports.Movie = exports.Rating = void 0;
    var ky_universal_1 = __importDefault(require("ky-universal"));
    var url_search_params_1 = __importDefault(require("@ungap/url-search-params"));
    var interfaces_1 = require("./interfaces");
    var omdbapi = new URL("https://www.omdbapi.com");
    function isRequestType(reqtype) {
        if (reqtype === "movie" ||
            reqtype === "series" ||
            reqtype === "episode" ||
            reqtype === "game") {
            return true;
        }
        return false;
    }
    function reqtoqueryobj(req, apikey, page) {
        var r = new url_search_params_1.default({
            apikey: apikey,
            s: req.name,
            page: String(page),
            r: "json",
        });
        if (req.year !== undefined) {
            r.append("y", String(req.year));
        }
        if (req.reqtype !== undefined) {
            r.append("type", String(req.reqtype));
        }
        return r;
    }
    var Rating = (function () {
        function Rating(source, value) {
            this.source = source;
            this.value = value;
        }
        return Rating;
    }());
    exports.Rating = Rating;
    var Movie = (function () {
        function Movie(obj) {
            this.ratings = [];
            this.title = obj.Title;
            this.year = 0;
            this._yearData = "";
            if (obj.Year !== undefined) {
                this._yearData = obj.Year;
                if (!obj.Year.match(/\d{4}[-â€“](?:\d{4})?/)) {
                    var rawYear = parseInt(obj.Year, 10);
                    if (isNaN(rawYear)) {
                        throw new TypeError("invalid year");
                    }
                    this.year = rawYear;
                }
                else {
                    this.year = 0;
                }
            }
            this.rated = obj.Rated;
            var rawReleased = new Date(obj.Released);
            if (isNaN(rawReleased.getTime())) {
                this.released = undefined;
            }
            else {
                this.released = rawReleased;
            }
            this.runtime = obj.Runtime;
            this.genres = obj.Genre;
            this.director = obj.Director;
            this.writer = obj.Writer;
            this.actors = obj.Actors;
            this.plot = obj.Plot;
            this.languages = obj.Language;
            this.country = obj.Country;
            this.awards = obj.Awards;
            this.poster = obj.Poster;
            this.metascore = obj.Metascore;
            var rawRating = parseFloat(obj.imdbRating);
            this.rating = isNaN(rawRating) ? 0 : rawRating;
            this.votes = obj.imdbVotes;
            this.imdbid = obj.imdbID;
            this.type = "episode";
            if (obj.Type !== undefined) {
                if (!isRequestType(obj.Type)) {
                    throw new TypeError(obj.Type + " is not a valid RequestType");
                }
                this.type = obj.Type;
            }
            if (obj.Ratings !== undefined) {
                for (var _i = 0, _a = obj.Ratings; _i < _a.length; _i++) {
                    var rating = _a[_i];
                    this.ratings.push(new Rating(rating.Source, rating.Value));
                }
            }
            if (obj.DVD !== undefined) {
                var rawDvd = new Date(obj.DVD);
                if (isNaN(rawDvd.getTime())) {
                    this.dvd = undefined;
                }
                else {
                    this.dvd = rawDvd;
                }
            }
            this.boxoffice = obj.BoxOffice;
            this.production = obj.Production;
            this.website = obj.Website;
            this.name = this.title;
            this.series = this.type === "series";
            this.imdburl = "https://www.imdb.com/title/" + this.imdbid;
        }
        return Movie;
    }());
    exports.Movie = Movie;
    var Episode = (function (_super) {
        __extends(Episode, _super);
        function Episode(obj, season) {
            var _this = _super.call(this, obj) || this;
            if (season !== undefined) {
                _this.season = season;
            }
            else {
                _this.season = parseInt(obj.Season, 10);
                if (isNaN(_this.season)) {
                    throw new TypeError("invalid season");
                }
            }
            _this.seriesid = obj.seriesID;
            if ("Episode" in obj) {
                _this.episode = parseInt(obj.Episode, 10);
                if (isNaN(_this.episode)) {
                    throw new TypeError("invalid episode");
                }
            }
            else {
                _this.episode = 0;
            }
            return _this;
        }
        return Episode;
    }(Movie));
    exports.Episode = Episode;
    var TVShow = (function (_super) {
        __extends(TVShow, _super);
        function TVShow(obj, opts) {
            var _this = _super.call(this, obj) || this;
            _this._episodes = [];
            var years = _this._yearData.split("-");
            _this.start_year = parseInt(years[0], 10);
            _this.end_year = parseInt(years[1], 10) ? parseInt(years[1], 10) : undefined;
            _this.totalseasons = parseInt(obj.totalSeasons, 10);
            _this.opts = opts;
            if (opts.baseURL && typeof opts.baseURL === "string") {
                opts.baseURL = new URL(opts.baseURL);
                _this.baseURL = opts.baseURL;
            }
            else if (opts.baseURL && opts.baseURL instanceof URL) {
                _this.baseURL = opts.baseURL;
            }
            else {
                _this.baseURL = omdbapi;
            }
            return _this;
        }
        TVShow.prototype.episodes = function () {
            var _this = this;
            if (this._episodes.length !== 0) {
                return Promise.resolve(this._episodes);
            }
            if (this.opts.apiKey === undefined) {
                throw new ImdbError("Missing api key in opts");
            }
            var funcs = [];
            for (var i = 1; i <= this.totalseasons; i++) {
                var qs_1 = new url_search_params_1.default({
                    Season: String(i),
                    apikey: this.opts.apiKey,
                    i: this.imdbid,
                    r: "json",
                });
                var reqopts = {
                    searchParams: qs_1,
                    headers: {
                        "Content-Type": "application/json",
                    },
                    timeout: undefined,
                    prefixUrl: this.baseURL,
                };
                if (this.opts.timeout !== undefined) {
                    reqopts.timeout = this.opts.timeout;
                }
                funcs.push(ky_universal_1.default("", reqopts).json());
            }
            var prom = Promise.all(funcs)
                .then(function (result) {
                if (interfaces_1.assertEpisodeSeasonResponse(result)) {
                    return Promise.resolve(result);
                }
                return Promise.reject(new TypeError("Invalid response from server"));
            })
                .then(function (epData) {
                var eps = [];
                for (var _i = 0, epData_1 = epData; _i < epData_1.length; _i++) {
                    var datum = epData_1[_i];
                    if (interfaces_1.isError(datum)) {
                        throw new ImdbError(datum.Error);
                    }
                    var season = parseInt(datum.Season, 10);
                    for (var _a = 0, _b = datum.Episodes; _a < _b.length; _a++) {
                        var ep = _b[_a];
                        eps.push(new Episode(ep, season));
                    }
                }
                _this._episodes = eps;
                return Promise.resolve(eps);
            });
            return prom;
        };
        return TVShow;
    }(Movie));
    exports.TVShow = TVShow;
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Game;
    }(Movie));
    exports.Game = Game;
    var SearchResult = (function () {
        function SearchResult(obj) {
            this.title = obj.Title;
            this.year = parseInt(obj.Year, 10);
            this.imdbid = obj.imdbID;
            if (!isRequestType(obj.Type)) {
                throw new TypeError(obj.Type + " is not a valid RequestType");
            }
            this.type = obj.Type;
            this.poster = obj.Poster;
            this.name = this.title;
        }
        return SearchResult;
    }());
    exports.SearchResult = SearchResult;
    var SearchResults = (function () {
        function SearchResults(obj, page, opts, req) {
            this.results = [];
            this.page = page;
            this.req = req;
            this.opts = opts;
            for (var _i = 0, _a = obj.Search; _i < _a.length; _i++) {
                var result = _a[_i];
                this.results.push(new SearchResult(result));
            }
            this.totalresults = parseInt(obj.totalResults, 10);
        }
        SearchResults.prototype.next = function () {
            return search(this.req, this.opts, this.page + 1);
        };
        return SearchResults;
    }());
    exports.SearchResults = SearchResults;
    var ImdbError = (function () {
        function ImdbError(message) {
            this.message = message;
            this.name = "imdb api error";
        }
        return ImdbError;
    }());
    exports.ImdbError = ImdbError;
    function get(req, opts) {
        try {
            return new Client(opts).get(req);
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
    exports.get = get;
    function search(req, opts, page) {
        return new Client(opts).search(req, page);
    }
    exports.search = search;
    var Client = (function () {
        function Client(opts) {
            if (!Object.prototype.hasOwnProperty.call(opts, "apiKey")) {
                throw new ImdbError("Missing api key in opts");
            }
            this.opts = opts;
            if (opts.baseURL && typeof opts.baseURL === "string") {
                opts.baseURL = new URL(opts.baseURL);
                this.baseURL = opts.baseURL;
            }
            else if (opts.baseURL && opts.baseURL instanceof URL) {
                this.baseURL = opts.baseURL;
            }
            else {
                this.baseURL = omdbapi;
            }
        }
        Client.prototype.get = function (req, opts) {
            var mergedOpts = this.mergeOpts(opts);
            if (mergedOpts.apiKey === undefined) {
                throw new ImdbError("Missing api key in opts");
            }
            var qs = new url_search_params_1.default({
                apikey: mergedOpts.apiKey,
                plot: req.short_plot ? "short" : "full",
                r: "json",
            });
            if (req.year !== undefined) {
                qs.append("y", String(req.year));
            }
            if (req.name) {
                qs.append("t", req.name);
            }
            else if (req.id) {
                qs.append("i", req.id);
            }
            else {
                return Promise.reject(new ImdbError("Missing one of req.id or req.name"));
            }
            var reqopts = {
                headers: {
                    "Content-Type": "application/json",
                },
                searchParams: qs,
                timeout: undefined,
                prefixUrl: this.baseURL,
            };
            if ("timeout" in mergedOpts) {
                reqopts.timeout = mergedOpts.timeout;
            }
            var prom = ky_universal_1.default("", reqopts)
                .json()
                .then(function (response) {
                if (interfaces_1.assertGetResponse(response)) {
                    return Promise.resolve(response);
                }
                return Promise.reject(new TypeError("Invalid response from server"));
            })
                .then(function (data) {
                var ret;
                if (interfaces_1.isError(data)) {
                    throw new ImdbError(data.Error + ": " + (req.name ? req.name : req.id));
                }
                if (interfaces_1.isMovie(data)) {
                    ret = new Movie(data);
                }
                else if (interfaces_1.isGame(data)) {
                    ret = new Game(data);
                }
                else if (interfaces_1.isTvshow(data)) {
                    ret = new TVShow(data, mergedOpts);
                }
                else if (interfaces_1.isEpisode(data)) {
                    ret = new Episode(data);
                }
                else {
                    throw new ImdbError("type: '" + data.Type + "' is not valid");
                }
                return Promise.resolve(ret);
            });
            return prom;
        };
        Client.prototype.search = function (req, page, opts) {
            var mergedOpts = this.mergeOpts(opts);
            if (page === undefined) {
                page = 1;
            }
            if (mergedOpts.apiKey === undefined) {
                throw new ImdbError("Missing api key in opts");
            }
            var qs = reqtoqueryobj(req, mergedOpts.apiKey, page);
            var reqopts = {
                searchParams: qs,
                headers: {
                    "Content-Type": "application/json",
                },
                timeout: undefined,
                prefixUrl: this.baseURL,
            };
            if (mergedOpts.timeout) {
                reqopts.timeout = mergedOpts.timeout;
            }
            var prom = ky_universal_1.default("", reqopts)
                .json()
                .then(function (response) {
                if (interfaces_1.assertSearchResponse(response)) {
                    return Promise.resolve(response);
                }
                return Promise.reject(new TypeError("Invalid response from server"));
            })
                .then(function (data) {
                if (interfaces_1.isError(data)) {
                    throw new ImdbError(data.Error + ": " + req.name);
                }
                if (page === undefined) {
                    page = 0;
                }
                return Promise.resolve(new SearchResults(data, page, mergedOpts, req));
            });
            return prom;
        };
        Client.prototype.mergeOpts = function (opts) {
            if (opts !== undefined) {
                return __assign(__assign({}, this.opts), opts);
            }
            return __assign({}, this.opts);
        };
        return Client;
    }());
    exports.Client = Client;
});
//# sourceMappingURL=imdb.js.map